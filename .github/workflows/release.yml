name: Release
on:
  push:
    branches:
      - main
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
      - name: git config
        run: |
          git config --global user.name "${{ github.event.pusher.name }}"
          git config --global user.email "${{ github.event.pusher.email }}"
      - uses: jbolda/covector/packages/action@covector-v0.11
        id: covector
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          command: "version-or-publish"
          createRelease: true
      - run: cargo update --workspace
        if: steps.covector.outputs.commandRan == 'version'
      - uses: peter-evans/create-pull-request@v3
        if: steps.covector.outputs.commandRan == 'version'
        with:
          title: "Publish New Versions"
          commit-message: "Publish new versions"
          labels: "versioning"
          branch: "release"
          body: ${{ steps.covector.outputs.change }}
    outputs:
      upload_url: ${{ steps.covector.outputs.releaseUploadUrl }}
  upload:
    if: needs.release.outputs.upload_url
    name: Upload asset (${{ matrix.config.asset_name }})
    needs: release
    permissions:
      contents: write
    strategy:
      matrix:
        config:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_file: mixxxkit
            asset_name: mixxxkit-linux
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_file: mixxxkit
            asset_name: mixxxkit-macos
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_file: mixxxkit.exe
            asset_name: mixxxkit-windows.exe
    runs-on: ${{ matrix.config.os }}
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.config.target }}
      - run: sudo apt install -y musl-tools
        if: matrix.config.os == 'ubuntu-latest'
      - run: cargo build --release --target ${{ matrix.config.target }}
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_name: ${{ matrix.config.asset_name }}
          asset_path: ./target/${{ matrix.config.target }}/release/${{ matrix.config.asset_file }}
          asset_content_type: application/octet-stream
