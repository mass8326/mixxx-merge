//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "library")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub artist: Option<String>,
    pub title: Option<String>,
    pub album: Option<String>,
    pub year: Option<String>,
    pub genre: Option<String>,
    pub tracknumber: Option<String>,
    pub location: Option<i32>,
    pub comment: Option<String>,
    pub url: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub duration: Option<f64>,
    pub bitrate: Option<i32>,
    pub samplerate: Option<i32>,
    #[sea_orm(select_as = "Text", save_as = "Text", nullable)]
    pub cuepoint: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub bpm: Option<f64>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub wavesummaryhex: Option<Vec<u8>>,
    pub channels: Option<i32>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub datetime_added: Option<Vec<u8>>,
    pub mixxx_deleted: Option<i32>,
    pub played: Option<i32>,
    pub header_parsed: Option<i32>,
    pub filetype: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub replaygain: Option<f64>,
    pub timesplayed: Option<i32>,
    pub rating: Option<i32>,
    pub key: Option<String>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub beats: Option<Vec<u8>>,
    pub beats_version: Option<String>,
    pub composer: Option<String>,
    pub bpm_lock: Option<i32>,
    pub beats_sub_version: Option<String>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub keys: Option<Vec<u8>>,
    pub keys_version: Option<String>,
    pub keys_sub_version: Option<String>,
    pub key_id: Option<i32>,
    pub grouping: Option<String>,
    pub album_artist: Option<String>,
    pub coverart_source: Option<i32>,
    pub coverart_type: Option<i32>,
    pub coverart_location: Option<String>,
    pub coverart_hash: Option<i32>,
    #[sea_orm(column_type = "Double", nullable)]
    pub replaygain_peak: Option<f64>,
    pub tracktotal: Option<String>,
    pub color: Option<i32>,
    pub coverart_color: Option<i32>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub coverart_digest: Option<Vec<u8>>,
    pub last_played_at: Option<DateTime>,
    pub source_synchronized_ms: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::track_locations::Entity",
        from = "Column::Location",
        to = "super::track_locations::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    TrackLocations,
}

impl Related<super::track_locations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TrackLocations.def()
    }
}

impl Related<super::crates::Entity> for Entity {
    fn to() -> RelationDef {
        super::crate_tracks::Relation::Crates.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::crate_tracks::Relation::Library.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
